# -*- coding: utf-8 -*-
"""Instagram post prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/192VDpaiqk2dvTD_cbgKXJVMWq9iDh61j

# **Instagram Post Reach Prediction using Python**

by Jay Gohil

---

# **Importing necessary libraries**

---
"""

import pandas as pd
from sklearn.metrics import plot_confusion_matrix
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

"""# **Loading the dataset**

---
"""

#Reading CSV file
df = pd.read_csv('https://raw.githubusercontent.com/github-goog/colab/main/instagram_dataset.csv')

#Displaying top of CSV
df.head(15)

"""# **Dropping unnecessary columns**

---
"""

#Dropping irrelevant columns
df = df.drop(df.columns[[0]], axis=1)
df = df.drop(['S.No','USERNAME', 'Caption', 'Hashtags', 'Time since posted'], axis=1)
#print(df) [All colums are dropped now]

#Displaying updated dataset
df.head(15)

"""# **Visualizing the dataset**

---
"""

# plotting a simple graph
df.plot()

#Checking correlation among features
print("Visualizing correlation between features using heatmap -->\n")
sns.heatmap(df.corr(method="pearson"), cmap='Reds')
#method="pearson"
#cmap='Reds'

plt.hist(df["Followers"])
plt.show()

plt.hist(df["time"], color=['green'])
plt.show()

plt.hist(df["Likes"], color=['orange'])
plt.show()

"""# **Preparing the dataset for Machine Learning**

---
"""

#Drppoing 'Likes' column from 'X' and adding it into 'y'
X = df.drop('Likes', axis=1)
y = df[['Likes']]

print("X dataset --> ")
print()
print(X)
print()
print()
print("Y dataset --> ")
print()
print(y)
print()

print()
plot1 = X.plot()
print()
plot2 = y.plot()

print(plot1)
print(plot2)

#Splliting the dataset into 80:20 ratio
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1)

while True:
  print("Dataset split completed!")
  break

"""# **Creating ML multivariate regression model**

---
"""

#Training the model
reg = LinearRegression()
reg.fit(X_train[['Followers','time']], y_train)

while True:
  print("Model training complete!")
  break

"""# **Making predictions on test dataset**

---
"""

#Making prediction on test dataset
y_predicted = reg.predict(X_test[['Followers','time']])

print(y_predicted)

"""# **Visualizing predictions**

---
"""

temp1 = []
temp2 = []
temp3 = []

for i in range(len(y_test.values)):
  temp1.append(int(y_test.values[i]))

for i in range(len(y_predicted)):
  temp2.append(int(y_predicted[i]))

for i in range(len(y_predicted)):
  temp3.append(i)

#Printing original values
print("Actual values -->")
print(temp1)

#Printing predicted values
print("\nPredicted values -->")
print(temp2)

print(temp3)

print("\n"*2)

plt.scatter(temp3, temp1, marker="*", color = 'red')
plt.scatter(temp3, temp2, color = 'green')

"""# **Evaluating model**

---
"""

#Printing the prediction's MSE value
pred = mean_squared_error(y_test, y_predicted)
print("Mean Squared Error   --> %.5f" % pred)

"""# **Making prediction on custom values**

---
"""

#Making prediction on custom value
custom_pred = reg.predict([[1000,3]])
print("The prediction for custom values : %.5f" % custom_pred[0][0])

"""# **Thank you!**

---
"""
